service: serverless-mailing-list
# app and org for use with dashboard.serverless.com
#app: serverless-mailing-list
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: ${opt:region, env:AWS_REGION, 'us-east-1'}
  logRetentionInDays: ${opt:logretention, env:AWS_LOG_RETENTION, '14'}
  deploymentBucket:
    tags:
      Purpose: ${self:service}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

custom:
  default_stage: dev
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:service}-${self:custom.stage}

functions:
  subscribe:
    handler: handler.subscribe
    events:
      - http:
          path: subscribe
          method: post

  confirm:
    handler: handler.confirm
    events:
      - http:
          path: confirm
          method: post

  unsubscribe:
    handler: handler.unsubscribe
    events:
      - http:
          path: unsubscribe
          method: get

  create_issue:
    handler: handler.create_issue
    events:
      - http:
          path: create_issue
          method: post

  send_issue:
    handler: handler.send_issue
    events:
      - schedule: rate(1 hour)

  dynamodb_backup:
    handler: handle.dynamodb_backup
    events: 
      - schedule: rate(1 day)


# CloudFormation resource templates
resources:
  Resources:
    SesQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.stack_name}-Ses.fifo
        Tags:
          - Key: Purpose
            Value: ${self:custom.stack_name}

    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stack_name}-Deadletter
        Tags:
          - Key: Purpose
            Value: ${self:custom.stack_name}
    
    SesHealthTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.stack_name}-SesHealth
        DisplayName: ${self:custom.stack_name} SES Health
        Subscription:
          - Endpoint: !GetAtt
            - SesHealthQueue
            - Arn
            Protocol: sqs
        Tags:
          - Key: Purpose
            Value: ${self:custom.stack_name}

    SesHealthQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stack_name}-SesHealth
        Tags:
          - Key: Purpose
            Value: ${self:custom.stack_name}
    
    Subscribers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stack_name}-subscribers
        AttributeDefinitions: 
          - AttributeName: email
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        TableClass: STANDARD_INFREQUENT_ACCESS
        Tags:
          - Key: Purpose
            Value: ${self:custom.stack_name}

    Issues:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stack_name}-issues
        AttributeDefinitions: 
          - AttributeName: issue_number
            AttributeType: N
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: issue_number
            KeyType: HASH
        TableClass: STANDARD_INFREQUENT_ACCESS
        Tags:
          - Key: Purpose
            Value: ${self:custom.stack_name}

  Outputs:
    SesHealthTopic:
      Description: Topic ARN for SES Feedback Notifications
      Value: !Ref SesHealthTopic
